// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: booking_service/booking_service.proto

package booking_service

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Appointment struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id"`
	DepartmentId         string   `protobuf:"bytes,2,opt,name=DepartmentId,proto3" json:"DepartmentId"`
	DoctorId             string   `protobuf:"bytes,3,opt,name=DoctorId,proto3" json:"DoctorId"`
	PatientId            string   `protobuf:"bytes,4,opt,name=PatientId,proto3" json:"PatientId"`
	AppointmentDate      string   `protobuf:"bytes,5,opt,name=AppointmentDate,proto3" json:"AppointmentDate"`
	AppointmentTime      string   `protobuf:"bytes,6,opt,name=AppointmentTime,proto3" json:"AppointmentTime"`
	Duration             int64    `protobuf:"varint,7,opt,name=Duration,proto3" json:"Duration"`
	Key                  string   `protobuf:"bytes,8,opt,name=Key,proto3" json:"Key"`
	ExpiresAt            int32    `protobuf:"varint,9,opt,name=ExpiresAt,proto3" json:"ExpiresAt"`
	PatientStatus        bool     `protobuf:"varint,10,opt,name=PatientStatus,proto3" json:"PatientStatus"`
	CreatedAt            string   `protobuf:"bytes,11,opt,name=CreatedAt,proto3" json:"CreatedAt"`
	UpdatedAt            string   `protobuf:"bytes,12,opt,name=UpdatedAt,proto3" json:"UpdatedAt"`
	DeletedAt            string   `protobuf:"bytes,13,opt,name=DeletedAt,proto3" json:"DeletedAt"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Appointment) Reset()         { *m = Appointment{} }
func (m *Appointment) String() string { return proto.CompactTextString(m) }
func (*Appointment) ProtoMessage()    {}
func (*Appointment) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{0}
}
func (m *Appointment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Appointment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Appointment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Appointment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Appointment.Merge(m, src)
}
func (m *Appointment) XXX_Size() int {
	return m.Size()
}
func (m *Appointment) XXX_DiscardUnknown() {
	xxx_messageInfo_Appointment.DiscardUnknown(m)
}

var xxx_messageInfo_Appointment proto.InternalMessageInfo

func (m *Appointment) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Appointment) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func (m *Appointment) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *Appointment) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Appointment) GetAppointmentDate() string {
	if m != nil {
		return m.AppointmentDate
	}
	return ""
}

func (m *Appointment) GetAppointmentTime() string {
	if m != nil {
		return m.AppointmentTime
	}
	return ""
}

func (m *Appointment) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Appointment) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Appointment) GetExpiresAt() int32 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *Appointment) GetPatientStatus() bool {
	if m != nil {
		return m.PatientStatus
	}
	return false
}

func (m *Appointment) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Appointment) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Appointment) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type AppointmentsType struct {
	Count                int64          `protobuf:"varint,1,opt,name=Count,proto3" json:"Count"`
	Appointments         []*Appointment `protobuf:"bytes,2,rep,name=Appointments,proto3" json:"Appointments"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AppointmentsType) Reset()         { *m = AppointmentsType{} }
func (m *AppointmentsType) String() string { return proto.CompactTextString(m) }
func (*AppointmentsType) ProtoMessage()    {}
func (*AppointmentsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{1}
}
func (m *AppointmentsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppointmentsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppointmentsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppointmentsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppointmentsType.Merge(m, src)
}
func (m *AppointmentsType) XXX_Size() int {
	return m.Size()
}
func (m *AppointmentsType) XXX_DiscardUnknown() {
	xxx_messageInfo_AppointmentsType.DiscardUnknown(m)
}

var xxx_messageInfo_AppointmentsType proto.InternalMessageInfo

func (m *AppointmentsType) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *AppointmentsType) GetAppointments() []*Appointment {
	if m != nil {
		return m.Appointments
	}
	return nil
}

type CreateAppointmentReq struct {
	DepartmentId         string   `protobuf:"bytes,2,opt,name=DepartmentId,proto3" json:"DepartmentId"`
	DoctorId             string   `protobuf:"bytes,3,opt,name=DoctorId,proto3" json:"DoctorId"`
	PatientId            string   `protobuf:"bytes,4,opt,name=PatientId,proto3" json:"PatientId"`
	AppointmentDate      string   `protobuf:"bytes,5,opt,name=AppointmentDate,proto3" json:"AppointmentDate"`
	AppointmentTime      string   `protobuf:"bytes,6,opt,name=AppointmentTime,proto3" json:"AppointmentTime"`
	Duration             int64    `protobuf:"varint,7,opt,name=Duration,proto3" json:"Duration"`
	Key                  string   `protobuf:"bytes,8,opt,name=Key,proto3" json:"Key"`
	ExpiresAt            int32    `protobuf:"varint,9,opt,name=ExpiresAt,proto3" json:"ExpiresAt"`
	PatientStatus        bool     `protobuf:"varint,10,opt,name=PatientStatus,proto3" json:"PatientStatus"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateAppointmentReq) Reset()         { *m = CreateAppointmentReq{} }
func (m *CreateAppointmentReq) String() string { return proto.CompactTextString(m) }
func (*CreateAppointmentReq) ProtoMessage()    {}
func (*CreateAppointmentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{2}
}
func (m *CreateAppointmentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAppointmentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAppointmentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAppointmentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAppointmentReq.Merge(m, src)
}
func (m *CreateAppointmentReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateAppointmentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAppointmentReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAppointmentReq proto.InternalMessageInfo

func (m *CreateAppointmentReq) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func (m *CreateAppointmentReq) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *CreateAppointmentReq) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *CreateAppointmentReq) GetAppointmentDate() string {
	if m != nil {
		return m.AppointmentDate
	}
	return ""
}

func (m *CreateAppointmentReq) GetAppointmentTime() string {
	if m != nil {
		return m.AppointmentTime
	}
	return ""
}

func (m *CreateAppointmentReq) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CreateAppointmentReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CreateAppointmentReq) GetExpiresAt() int32 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *CreateAppointmentReq) GetPatientStatus() bool {
	if m != nil {
		return m.PatientStatus
	}
	return false
}

type UpdateAppointmentReq struct {
	AppointmentDate      string   `protobuf:"bytes,2,opt,name=AppointmentDate,proto3" json:"AppointmentDate"`
	AppointmentTime      string   `protobuf:"bytes,3,opt,name=AppointmentTime,proto3" json:"AppointmentTime"`
	Duration             int64    `protobuf:"varint,4,opt,name=Duration,proto3" json:"Duration"`
	Key                  string   `protobuf:"bytes,5,opt,name=Key,proto3" json:"Key"`
	ExpiresAt            int32    `protobuf:"varint,6,opt,name=ExpiresAt,proto3" json:"ExpiresAt"`
	PatientStatus        bool     `protobuf:"varint,7,opt,name=PatientStatus,proto3" json:"PatientStatus"`
	Field                string   `protobuf:"bytes,8,opt,name=Field,proto3" json:"Field"`
	Value                string   `protobuf:"bytes,9,opt,name=Value,proto3" json:"Value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAppointmentReq) Reset()         { *m = UpdateAppointmentReq{} }
func (m *UpdateAppointmentReq) String() string { return proto.CompactTextString(m) }
func (*UpdateAppointmentReq) ProtoMessage()    {}
func (*UpdateAppointmentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{3}
}
func (m *UpdateAppointmentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAppointmentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAppointmentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAppointmentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAppointmentReq.Merge(m, src)
}
func (m *UpdateAppointmentReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAppointmentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAppointmentReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAppointmentReq proto.InternalMessageInfo

func (m *UpdateAppointmentReq) GetAppointmentDate() string {
	if m != nil {
		return m.AppointmentDate
	}
	return ""
}

func (m *UpdateAppointmentReq) GetAppointmentTime() string {
	if m != nil {
		return m.AppointmentTime
	}
	return ""
}

func (m *UpdateAppointmentReq) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *UpdateAppointmentReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UpdateAppointmentReq) GetExpiresAt() int32 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *UpdateAppointmentReq) GetPatientStatus() bool {
	if m != nil {
		return m.PatientStatus
	}
	return false
}

func (m *UpdateAppointmentReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *UpdateAppointmentReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type FieldValueReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=Field,proto3" json:"Field"`
	Value                string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value"`
	DeleteStatus         bool     `protobuf:"varint,3,opt,name=DeleteStatus,proto3" json:"DeleteStatus"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FieldValueReq) Reset()         { *m = FieldValueReq{} }
func (m *FieldValueReq) String() string { return proto.CompactTextString(m) }
func (*FieldValueReq) ProtoMessage()    {}
func (*FieldValueReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{4}
}
func (m *FieldValueReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldValueReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldValueReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FieldValueReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldValueReq.Merge(m, src)
}
func (m *FieldValueReq) XXX_Size() int {
	return m.Size()
}
func (m *FieldValueReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldValueReq.DiscardUnknown(m)
}

var xxx_messageInfo_FieldValueReq proto.InternalMessageInfo

func (m *FieldValueReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *FieldValueReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *FieldValueReq) GetDeleteStatus() bool {
	if m != nil {
		return m.DeleteStatus
	}
	return false
}

type StatusRes struct {
	Status               bool     `protobuf:"varint,1,opt,name=Status,proto3" json:"Status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusRes) Reset()         { *m = StatusRes{} }
func (m *StatusRes) String() string { return proto.CompactTextString(m) }
func (*StatusRes) ProtoMessage()    {}
func (*StatusRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{5}
}
func (m *StatusRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRes.Merge(m, src)
}
func (m *StatusRes) XXX_Size() int {
	return m.Size()
}
func (m *StatusRes) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRes.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRes proto.InternalMessageInfo

func (m *StatusRes) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type GetAllReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=Field,proto3" json:"Field"`
	Value                string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value"`
	DeleteStatus         bool     `protobuf:"varint,3,opt,name=DeleteStatus,proto3" json:"DeleteStatus"`
	Page                 uint64   `protobuf:"varint,4,opt,name=Page,proto3" json:"Page"`
	Limit                uint64   `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit"`
	OrderBy              string   `protobuf:"bytes,6,opt,name=OrderBy,proto3" json:"OrderBy"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllReq) Reset()         { *m = GetAllReq{} }
func (m *GetAllReq) String() string { return proto.CompactTextString(m) }
func (*GetAllReq) ProtoMessage()    {}
func (*GetAllReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{6}
}
func (m *GetAllReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllReq.Merge(m, src)
}
func (m *GetAllReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAllReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllReq proto.InternalMessageInfo

func (m *GetAllReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *GetAllReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *GetAllReq) GetDeleteStatus() bool {
	if m != nil {
		return m.DeleteStatus
	}
	return false
}

func (m *GetAllReq) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetAllReq) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

type Patient struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id"`
	FirstName            string   `protobuf:"bytes,2,opt,name=FirstName,proto3" json:"FirstName"`
	LastName             string   `protobuf:"bytes,3,opt,name=LastName,proto3" json:"LastName"`
	BirthDate            string   `protobuf:"bytes,4,opt,name=BirthDate,proto3" json:"BirthDate"`
	Gender               string   `protobuf:"bytes,5,opt,name=Gender,proto3" json:"Gender"`
	BloodGroup           string   `protobuf:"bytes,6,opt,name=BloodGroup,proto3" json:"BloodGroup"`
	PhoneNumber          string   `protobuf:"bytes,7,opt,name=PhoneNumber,proto3" json:"PhoneNumber"`
	City                 string   `protobuf:"bytes,8,opt,name=City,proto3" json:"City"`
	Country              string   `protobuf:"bytes,9,opt,name=Country,proto3" json:"Country"`
	PatientProblem       string   `protobuf:"bytes,10,opt,name=PatientProblem,proto3" json:"PatientProblem"`
	CreatedAt            string   `protobuf:"bytes,11,opt,name=CreatedAt,proto3" json:"CreatedAt"`
	UpdatedAt            string   `protobuf:"bytes,12,opt,name=UpdatedAt,proto3" json:"UpdatedAt"`
	DeletedAt            string   `protobuf:"bytes,13,opt,name=DeletedAt,proto3" json:"DeletedAt"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Patient) Reset()         { *m = Patient{} }
func (m *Patient) String() string { return proto.CompactTextString(m) }
func (*Patient) ProtoMessage()    {}
func (*Patient) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{7}
}
func (m *Patient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Patient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Patient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Patient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Patient.Merge(m, src)
}
func (m *Patient) XXX_Size() int {
	return m.Size()
}
func (m *Patient) XXX_DiscardUnknown() {
	xxx_messageInfo_Patient.DiscardUnknown(m)
}

var xxx_messageInfo_Patient proto.InternalMessageInfo

func (m *Patient) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Patient) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Patient) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Patient) GetBirthDate() string {
	if m != nil {
		return m.BirthDate
	}
	return ""
}

func (m *Patient) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *Patient) GetBloodGroup() string {
	if m != nil {
		return m.BloodGroup
	}
	return ""
}

func (m *Patient) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *Patient) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Patient) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Patient) GetPatientProblem() string {
	if m != nil {
		return m.PatientProblem
	}
	return ""
}

func (m *Patient) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Patient) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Patient) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type PatientsType struct {
	Count                int64      `protobuf:"varint,1,opt,name=Count,proto3" json:"Count"`
	Patients             []*Patient `protobuf:"bytes,2,rep,name=Patients,proto3" json:"Patients"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PatientsType) Reset()         { *m = PatientsType{} }
func (m *PatientsType) String() string { return proto.CompactTextString(m) }
func (*PatientsType) ProtoMessage()    {}
func (*PatientsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{8}
}
func (m *PatientsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PatientsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PatientsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PatientsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatientsType.Merge(m, src)
}
func (m *PatientsType) XXX_Size() int {
	return m.Size()
}
func (m *PatientsType) XXX_DiscardUnknown() {
	xxx_messageInfo_PatientsType.DiscardUnknown(m)
}

var xxx_messageInfo_PatientsType proto.InternalMessageInfo

func (m *PatientsType) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PatientsType) GetPatients() []*Patient {
	if m != nil {
		return m.Patients
	}
	return nil
}

type CreatedPatient struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id"`
	FirstName            string   `protobuf:"bytes,2,opt,name=FirstName,proto3" json:"FirstName"`
	LastName             string   `protobuf:"bytes,3,opt,name=LastName,proto3" json:"LastName"`
	BirthDate            string   `protobuf:"bytes,4,opt,name=BirthDate,proto3" json:"BirthDate"`
	Gender               string   `protobuf:"bytes,5,opt,name=Gender,proto3" json:"Gender"`
	BloodGroup           string   `protobuf:"bytes,6,opt,name=BloodGroup,proto3" json:"BloodGroup"`
	PhoneNumber          string   `protobuf:"bytes,7,opt,name=PhoneNumber,proto3" json:"PhoneNumber"`
	City                 string   `protobuf:"bytes,8,opt,name=City,proto3" json:"City"`
	Country              string   `protobuf:"bytes,9,opt,name=Country,proto3" json:"Country"`
	PatientProblem       string   `protobuf:"bytes,10,opt,name=PatientProblem,proto3" json:"PatientProblem"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatedPatient) Reset()         { *m = CreatedPatient{} }
func (m *CreatedPatient) String() string { return proto.CompactTextString(m) }
func (*CreatedPatient) ProtoMessage()    {}
func (*CreatedPatient) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{9}
}
func (m *CreatedPatient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatedPatient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatedPatient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatedPatient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatedPatient.Merge(m, src)
}
func (m *CreatedPatient) XXX_Size() int {
	return m.Size()
}
func (m *CreatedPatient) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatedPatient.DiscardUnknown(m)
}

var xxx_messageInfo_CreatedPatient proto.InternalMessageInfo

func (m *CreatedPatient) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreatedPatient) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *CreatedPatient) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *CreatedPatient) GetBirthDate() string {
	if m != nil {
		return m.BirthDate
	}
	return ""
}

func (m *CreatedPatient) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *CreatedPatient) GetBloodGroup() string {
	if m != nil {
		return m.BloodGroup
	}
	return ""
}

func (m *CreatedPatient) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *CreatedPatient) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *CreatedPatient) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *CreatedPatient) GetPatientProblem() string {
	if m != nil {
		return m.PatientProblem
	}
	return ""
}

type UpdatePatientReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=Field,proto3" json:"Field"`
	Value                string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value"`
	FirstName            string   `protobuf:"bytes,3,opt,name=FirstName,proto3" json:"FirstName"`
	LastName             string   `protobuf:"bytes,4,opt,name=LastName,proto3" json:"LastName"`
	BirthDate            string   `protobuf:"bytes,5,opt,name=BirthDate,proto3" json:"BirthDate"`
	Gender               string   `protobuf:"bytes,6,opt,name=Gender,proto3" json:"Gender"`
	BloodGroup           string   `protobuf:"bytes,7,opt,name=BloodGroup,proto3" json:"BloodGroup"`
	City                 string   `protobuf:"bytes,9,opt,name=City,proto3" json:"City"`
	Country              string   `protobuf:"bytes,10,opt,name=Country,proto3" json:"Country"`
	PatientProblem       string   `protobuf:"bytes,11,opt,name=PatientProblem,proto3" json:"PatientProblem"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePatientReq) Reset()         { *m = UpdatePatientReq{} }
func (m *UpdatePatientReq) String() string { return proto.CompactTextString(m) }
func (*UpdatePatientReq) ProtoMessage()    {}
func (*UpdatePatientReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{10}
}
func (m *UpdatePatientReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePatientReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePatientReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePatientReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePatientReq.Merge(m, src)
}
func (m *UpdatePatientReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePatientReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePatientReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePatientReq proto.InternalMessageInfo

func (m *UpdatePatientReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *UpdatePatientReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UpdatePatientReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UpdatePatientReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UpdatePatientReq) GetBirthDate() string {
	if m != nil {
		return m.BirthDate
	}
	return ""
}

func (m *UpdatePatientReq) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *UpdatePatientReq) GetBloodGroup() string {
	if m != nil {
		return m.BloodGroup
	}
	return ""
}

func (m *UpdatePatientReq) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UpdatePatientReq) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UpdatePatientReq) GetPatientProblem() string {
	if m != nil {
		return m.PatientProblem
	}
	return ""
}

type UpdatePhoneNumber struct {
	Field                string   `protobuf:"bytes,1,opt,name=Field,proto3" json:"Field"`
	Value                string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value"`
	PhoneNumber          string   `protobuf:"bytes,3,opt,name=PhoneNumber,proto3" json:"PhoneNumber"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePhoneNumber) Reset()         { *m = UpdatePhoneNumber{} }
func (m *UpdatePhoneNumber) String() string { return proto.CompactTextString(m) }
func (*UpdatePhoneNumber) ProtoMessage()    {}
func (*UpdatePhoneNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{11}
}
func (m *UpdatePhoneNumber) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePhoneNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePhoneNumber.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePhoneNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePhoneNumber.Merge(m, src)
}
func (m *UpdatePhoneNumber) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePhoneNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePhoneNumber.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePhoneNumber proto.InternalMessageInfo

func (m *UpdatePhoneNumber) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *UpdatePhoneNumber) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UpdatePhoneNumber) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

type DoctorNote struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id"`
	AppointmentId        int64    `protobuf:"varint,2,opt,name=AppointmentId,proto3" json:"AppointmentId"`
	DoctorId             string   `protobuf:"bytes,3,opt,name=DoctorId,proto3" json:"DoctorId"`
	PatientId            string   `protobuf:"bytes,4,opt,name=PatientId,proto3" json:"PatientId"`
	Prescription         string   `protobuf:"bytes,5,opt,name=Prescription,proto3" json:"Prescription"`
	CreatedAt            string   `protobuf:"bytes,6,opt,name=CreatedAt,proto3" json:"CreatedAt"`
	UpdatedAt            string   `protobuf:"bytes,7,opt,name=UpdatedAt,proto3" json:"UpdatedAt"`
	DeletedAt            string   `protobuf:"bytes,8,opt,name=DeletedAt,proto3" json:"DeletedAt"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoctorNote) Reset()         { *m = DoctorNote{} }
func (m *DoctorNote) String() string { return proto.CompactTextString(m) }
func (*DoctorNote) ProtoMessage()    {}
func (*DoctorNote) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{12}
}
func (m *DoctorNote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorNote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorNote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorNote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorNote.Merge(m, src)
}
func (m *DoctorNote) XXX_Size() int {
	return m.Size()
}
func (m *DoctorNote) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorNote.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorNote proto.InternalMessageInfo

func (m *DoctorNote) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DoctorNote) GetAppointmentId() int64 {
	if m != nil {
		return m.AppointmentId
	}
	return 0
}

func (m *DoctorNote) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *DoctorNote) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *DoctorNote) GetPrescription() string {
	if m != nil {
		return m.Prescription
	}
	return ""
}

func (m *DoctorNote) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *DoctorNote) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *DoctorNote) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type DoctorNotesType struct {
	Count                int64         `protobuf:"varint,1,opt,name=Count,proto3" json:"Count"`
	DoctorNotes          []*DoctorNote `protobuf:"bytes,2,rep,name=DoctorNotes,proto3" json:"DoctorNotes"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DoctorNotesType) Reset()         { *m = DoctorNotesType{} }
func (m *DoctorNotesType) String() string { return proto.CompactTextString(m) }
func (*DoctorNotesType) ProtoMessage()    {}
func (*DoctorNotesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{13}
}
func (m *DoctorNotesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorNotesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorNotesType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorNotesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorNotesType.Merge(m, src)
}
func (m *DoctorNotesType) XXX_Size() int {
	return m.Size()
}
func (m *DoctorNotesType) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorNotesType.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorNotesType proto.InternalMessageInfo

func (m *DoctorNotesType) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DoctorNotesType) GetDoctorNotes() []*DoctorNote {
	if m != nil {
		return m.DoctorNotes
	}
	return nil
}

type CreatedDoctorNote struct {
	AppointmentId        int64    `protobuf:"varint,1,opt,name=AppointmentId,proto3" json:"AppointmentId"`
	DoctorId             string   `protobuf:"bytes,2,opt,name=DoctorId,proto3" json:"DoctorId"`
	PatientId            string   `protobuf:"bytes,3,opt,name=PatientId,proto3" json:"PatientId"`
	Prescription         string   `protobuf:"bytes,4,opt,name=Prescription,proto3" json:"Prescription"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatedDoctorNote) Reset()         { *m = CreatedDoctorNote{} }
func (m *CreatedDoctorNote) String() string { return proto.CompactTextString(m) }
func (*CreatedDoctorNote) ProtoMessage()    {}
func (*CreatedDoctorNote) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{14}
}
func (m *CreatedDoctorNote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatedDoctorNote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatedDoctorNote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatedDoctorNote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatedDoctorNote.Merge(m, src)
}
func (m *CreatedDoctorNote) XXX_Size() int {
	return m.Size()
}
func (m *CreatedDoctorNote) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatedDoctorNote.DiscardUnknown(m)
}

var xxx_messageInfo_CreatedDoctorNote proto.InternalMessageInfo

func (m *CreatedDoctorNote) GetAppointmentId() int64 {
	if m != nil {
		return m.AppointmentId
	}
	return 0
}

func (m *CreatedDoctorNote) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *CreatedDoctorNote) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *CreatedDoctorNote) GetPrescription() string {
	if m != nil {
		return m.Prescription
	}
	return ""
}

type UpdateDoctorNoteReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=Field,proto3" json:"Field"`
	Value                string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value"`
	AppointmentId        int64    `protobuf:"varint,3,opt,name=AppointmentId,proto3" json:"AppointmentId"`
	DoctorId             string   `protobuf:"bytes,4,opt,name=DoctorId,proto3" json:"DoctorId"`
	PatientId            string   `protobuf:"bytes,5,opt,name=PatientId,proto3" json:"PatientId"`
	Prescription         string   `protobuf:"bytes,6,opt,name=Prescription,proto3" json:"Prescription"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDoctorNoteReq) Reset()         { *m = UpdateDoctorNoteReq{} }
func (m *UpdateDoctorNoteReq) String() string { return proto.CompactTextString(m) }
func (*UpdateDoctorNoteReq) ProtoMessage()    {}
func (*UpdateDoctorNoteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{15}
}
func (m *UpdateDoctorNoteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDoctorNoteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDoctorNoteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDoctorNoteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDoctorNoteReq.Merge(m, src)
}
func (m *UpdateDoctorNoteReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDoctorNoteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDoctorNoteReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDoctorNoteReq proto.InternalMessageInfo

func (m *UpdateDoctorNoteReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *UpdateDoctorNoteReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UpdateDoctorNoteReq) GetAppointmentId() int64 {
	if m != nil {
		return m.AppointmentId
	}
	return 0
}

func (m *UpdateDoctorNoteReq) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *UpdateDoctorNoteReq) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *UpdateDoctorNoteReq) GetPrescription() string {
	if m != nil {
		return m.Prescription
	}
	return ""
}

type Archive struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id"`
	DoctorAvailabilityId int64    `protobuf:"varint,2,opt,name=DoctorAvailabilityId,proto3" json:"DoctorAvailabilityId"`
	StartTime            string   `protobuf:"bytes,3,opt,name=StartTime,proto3" json:"StartTime"`
	EndTime              string   `protobuf:"bytes,4,opt,name=EndTime,proto3" json:"EndTime"`
	PatientProblem       string   `protobuf:"bytes,5,opt,name=PatientProblem,proto3" json:"PatientProblem"`
	Status               string   `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status"`
	PaymentType          string   `protobuf:"bytes,7,opt,name=PaymentType,proto3" json:"PaymentType"`
	PaymentAmount        float32  `protobuf:"fixed32,8,opt,name=PaymentAmount,proto3" json:"PaymentAmount"`
	CreatedAt            string   `protobuf:"bytes,9,opt,name=CreatedAt,proto3" json:"CreatedAt"`
	UpdatedAt            string   `protobuf:"bytes,10,opt,name=UpdatedAt,proto3" json:"UpdatedAt"`
	DeletedAt            string   `protobuf:"bytes,11,opt,name=DeletedAt,proto3" json:"DeletedAt"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Archive) Reset()         { *m = Archive{} }
func (m *Archive) String() string { return proto.CompactTextString(m) }
func (*Archive) ProtoMessage()    {}
func (*Archive) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{16}
}
func (m *Archive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Archive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Archive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Archive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Archive.Merge(m, src)
}
func (m *Archive) XXX_Size() int {
	return m.Size()
}
func (m *Archive) XXX_DiscardUnknown() {
	xxx_messageInfo_Archive.DiscardUnknown(m)
}

var xxx_messageInfo_Archive proto.InternalMessageInfo

func (m *Archive) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Archive) GetDoctorAvailabilityId() int64 {
	if m != nil {
		return m.DoctorAvailabilityId
	}
	return 0
}

func (m *Archive) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *Archive) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *Archive) GetPatientProblem() string {
	if m != nil {
		return m.PatientProblem
	}
	return ""
}

func (m *Archive) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Archive) GetPaymentType() string {
	if m != nil {
		return m.PaymentType
	}
	return ""
}

func (m *Archive) GetPaymentAmount() float32 {
	if m != nil {
		return m.PaymentAmount
	}
	return 0
}

func (m *Archive) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Archive) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Archive) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type ArchivesType struct {
	Count                int64      `protobuf:"varint,1,opt,name=Count,proto3" json:"Count"`
	Archives             []*Archive `protobuf:"bytes,2,rep,name=Archives,proto3" json:"Archives"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ArchivesType) Reset()         { *m = ArchivesType{} }
func (m *ArchivesType) String() string { return proto.CompactTextString(m) }
func (*ArchivesType) ProtoMessage()    {}
func (*ArchivesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{17}
}
func (m *ArchivesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArchivesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArchivesType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArchivesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchivesType.Merge(m, src)
}
func (m *ArchivesType) XXX_Size() int {
	return m.Size()
}
func (m *ArchivesType) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchivesType.DiscardUnknown(m)
}

var xxx_messageInfo_ArchivesType proto.InternalMessageInfo

func (m *ArchivesType) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ArchivesType) GetArchives() []*Archive {
	if m != nil {
		return m.Archives
	}
	return nil
}

type CreatedArchive struct {
	DoctorAvailabilityId int64    `protobuf:"varint,1,opt,name=DoctorAvailabilityId,proto3" json:"DoctorAvailabilityId"`
	StartTime            string   `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime"`
	EndTime              string   `protobuf:"bytes,3,opt,name=EndTime,proto3" json:"EndTime"`
	PatientProblem       string   `protobuf:"bytes,4,opt,name=PatientProblem,proto3" json:"PatientProblem"`
	Status               string   `protobuf:"bytes,5,opt,name=Status,proto3" json:"Status"`
	PaymentType          string   `protobuf:"bytes,6,opt,name=PaymentType,proto3" json:"PaymentType"`
	PaymentAmount        float32  `protobuf:"fixed32,7,opt,name=PaymentAmount,proto3" json:"PaymentAmount"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatedArchive) Reset()         { *m = CreatedArchive{} }
func (m *CreatedArchive) String() string { return proto.CompactTextString(m) }
func (*CreatedArchive) ProtoMessage()    {}
func (*CreatedArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{18}
}
func (m *CreatedArchive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatedArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatedArchive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatedArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatedArchive.Merge(m, src)
}
func (m *CreatedArchive) XXX_Size() int {
	return m.Size()
}
func (m *CreatedArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatedArchive.DiscardUnknown(m)
}

var xxx_messageInfo_CreatedArchive proto.InternalMessageInfo

func (m *CreatedArchive) GetDoctorAvailabilityId() int64 {
	if m != nil {
		return m.DoctorAvailabilityId
	}
	return 0
}

func (m *CreatedArchive) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *CreatedArchive) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *CreatedArchive) GetPatientProblem() string {
	if m != nil {
		return m.PatientProblem
	}
	return ""
}

func (m *CreatedArchive) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *CreatedArchive) GetPaymentType() string {
	if m != nil {
		return m.PaymentType
	}
	return ""
}

func (m *CreatedArchive) GetPaymentAmount() float32 {
	if m != nil {
		return m.PaymentAmount
	}
	return 0
}

type UpdateArchiveReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=Field,proto3" json:"Field"`
	Value                string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value"`
	DoctorAvailabilityId int64    `protobuf:"varint,3,opt,name=DoctorAvailabilityId,proto3" json:"DoctorAvailabilityId"`
	StartTime            string   `protobuf:"bytes,4,opt,name=StartTime,proto3" json:"StartTime"`
	EndTime              string   `protobuf:"bytes,5,opt,name=EndTime,proto3" json:"EndTime"`
	PatientProblem       string   `protobuf:"bytes,6,opt,name=PatientProblem,proto3" json:"PatientProblem"`
	Status               string   `protobuf:"bytes,7,opt,name=Status,proto3" json:"Status"`
	PaymentType          string   `protobuf:"bytes,8,opt,name=PaymentType,proto3" json:"PaymentType"`
	PaymentAmount        float32  `protobuf:"fixed32,9,opt,name=PaymentAmount,proto3" json:"PaymentAmount"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateArchiveReq) Reset()         { *m = UpdateArchiveReq{} }
func (m *UpdateArchiveReq) String() string { return proto.CompactTextString(m) }
func (*UpdateArchiveReq) ProtoMessage()    {}
func (*UpdateArchiveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{19}
}
func (m *UpdateArchiveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateArchiveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateArchiveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateArchiveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateArchiveReq.Merge(m, src)
}
func (m *UpdateArchiveReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateArchiveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateArchiveReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateArchiveReq proto.InternalMessageInfo

func (m *UpdateArchiveReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *UpdateArchiveReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UpdateArchiveReq) GetDoctorAvailabilityId() int64 {
	if m != nil {
		return m.DoctorAvailabilityId
	}
	return 0
}

func (m *UpdateArchiveReq) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *UpdateArchiveReq) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *UpdateArchiveReq) GetPatientProblem() string {
	if m != nil {
		return m.PatientProblem
	}
	return ""
}

func (m *UpdateArchiveReq) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UpdateArchiveReq) GetPaymentType() string {
	if m != nil {
		return m.PaymentType
	}
	return ""
}

func (m *UpdateArchiveReq) GetPaymentAmount() float32 {
	if m != nil {
		return m.PaymentAmount
	}
	return 0
}

type DoctorAvailability struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id"`
	DepartmentId         string   `protobuf:"bytes,2,opt,name=DepartmentId,proto3" json:"DepartmentId"`
	DoctorId             string   `protobuf:"bytes,3,opt,name=DoctorId,proto3" json:"DoctorId"`
	DoctorDate           string   `protobuf:"bytes,4,opt,name=DoctorDate,proto3" json:"DoctorDate"`
	StartTime            string   `protobuf:"bytes,5,opt,name=StartTime,proto3" json:"StartTime"`
	EndTime              string   `protobuf:"bytes,6,opt,name=EndTime,proto3" json:"EndTime"`
	Status               string   `protobuf:"bytes,7,opt,name=Status,proto3" json:"Status"`
	CreatedAt            string   `protobuf:"bytes,8,opt,name=CreatedAt,proto3" json:"CreatedAt"`
	UpdatedAt            string   `protobuf:"bytes,9,opt,name=UpdatedAt,proto3" json:"UpdatedAt"`
	DeletedAt            string   `protobuf:"bytes,10,opt,name=DeletedAt,proto3" json:"DeletedAt"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoctorAvailability) Reset()         { *m = DoctorAvailability{} }
func (m *DoctorAvailability) String() string { return proto.CompactTextString(m) }
func (*DoctorAvailability) ProtoMessage()    {}
func (*DoctorAvailability) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{20}
}
func (m *DoctorAvailability) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorAvailability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorAvailability.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorAvailability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorAvailability.Merge(m, src)
}
func (m *DoctorAvailability) XXX_Size() int {
	return m.Size()
}
func (m *DoctorAvailability) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorAvailability.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorAvailability proto.InternalMessageInfo

func (m *DoctorAvailability) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DoctorAvailability) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func (m *DoctorAvailability) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *DoctorAvailability) GetDoctorDate() string {
	if m != nil {
		return m.DoctorDate
	}
	return ""
}

func (m *DoctorAvailability) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *DoctorAvailability) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *DoctorAvailability) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DoctorAvailability) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *DoctorAvailability) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *DoctorAvailability) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type DoctorAvailabilitysType struct {
	Count                int64                 `protobuf:"varint,1,opt,name=Count,proto3" json:"Count"`
	Doctor_Availabilitys []*DoctorAvailability `protobuf:"bytes,2,rep,name=Doctor_Availabilitys,json=DoctorAvailabilitys,proto3" json:"Doctor_Availabilitys"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DoctorAvailabilitysType) Reset()         { *m = DoctorAvailabilitysType{} }
func (m *DoctorAvailabilitysType) String() string { return proto.CompactTextString(m) }
func (*DoctorAvailabilitysType) ProtoMessage()    {}
func (*DoctorAvailabilitysType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{21}
}
func (m *DoctorAvailabilitysType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorAvailabilitysType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorAvailabilitysType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorAvailabilitysType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorAvailabilitysType.Merge(m, src)
}
func (m *DoctorAvailabilitysType) XXX_Size() int {
	return m.Size()
}
func (m *DoctorAvailabilitysType) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorAvailabilitysType.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorAvailabilitysType proto.InternalMessageInfo

func (m *DoctorAvailabilitysType) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DoctorAvailabilitysType) GetDoctor_Availabilitys() []*DoctorAvailability {
	if m != nil {
		return m.Doctor_Availabilitys
	}
	return nil
}

type CreatedDoctorAvailability struct {
	DepartmentId         string   `protobuf:"bytes,1,opt,name=DepartmentId,proto3" json:"DepartmentId"`
	DoctorId             string   `protobuf:"bytes,2,opt,name=DoctorId,proto3" json:"DoctorId"`
	DoctorDate           string   `protobuf:"bytes,3,opt,name=DoctorDate,proto3" json:"DoctorDate"`
	StartTime            string   `protobuf:"bytes,4,opt,name=StartTime,proto3" json:"StartTime"`
	EndTime              string   `protobuf:"bytes,5,opt,name=EndTime,proto3" json:"EndTime"`
	Status               string   `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatedDoctorAvailability) Reset()         { *m = CreatedDoctorAvailability{} }
func (m *CreatedDoctorAvailability) String() string { return proto.CompactTextString(m) }
func (*CreatedDoctorAvailability) ProtoMessage()    {}
func (*CreatedDoctorAvailability) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{22}
}
func (m *CreatedDoctorAvailability) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatedDoctorAvailability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatedDoctorAvailability.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatedDoctorAvailability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatedDoctorAvailability.Merge(m, src)
}
func (m *CreatedDoctorAvailability) XXX_Size() int {
	return m.Size()
}
func (m *CreatedDoctorAvailability) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatedDoctorAvailability.DiscardUnknown(m)
}

var xxx_messageInfo_CreatedDoctorAvailability proto.InternalMessageInfo

func (m *CreatedDoctorAvailability) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func (m *CreatedDoctorAvailability) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *CreatedDoctorAvailability) GetDoctorDate() string {
	if m != nil {
		return m.DoctorDate
	}
	return ""
}

func (m *CreatedDoctorAvailability) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *CreatedDoctorAvailability) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *CreatedDoctorAvailability) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type UpdateDoctorAvailabilityReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=Field,proto3" json:"Field"`
	Value                string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value"`
	DepartmentId         string   `protobuf:"bytes,3,opt,name=DepartmentId,proto3" json:"DepartmentId"`
	DoctorId             string   `protobuf:"bytes,4,opt,name=DoctorId,proto3" json:"DoctorId"`
	DoctorDate           string   `protobuf:"bytes,5,opt,name=DoctorDate,proto3" json:"DoctorDate"`
	StartTime            string   `protobuf:"bytes,6,opt,name=StartTime,proto3" json:"StartTime"`
	EndTime              string   `protobuf:"bytes,7,opt,name=EndTime,proto3" json:"EndTime"`
	Status               string   `protobuf:"bytes,8,opt,name=Status,proto3" json:"Status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDoctorAvailabilityReq) Reset()         { *m = UpdateDoctorAvailabilityReq{} }
func (m *UpdateDoctorAvailabilityReq) String() string { return proto.CompactTextString(m) }
func (*UpdateDoctorAvailabilityReq) ProtoMessage()    {}
func (*UpdateDoctorAvailabilityReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3797a257730a0219, []int{23}
}
func (m *UpdateDoctorAvailabilityReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDoctorAvailabilityReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDoctorAvailabilityReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDoctorAvailabilityReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDoctorAvailabilityReq.Merge(m, src)
}
func (m *UpdateDoctorAvailabilityReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDoctorAvailabilityReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDoctorAvailabilityReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDoctorAvailabilityReq proto.InternalMessageInfo

func (m *UpdateDoctorAvailabilityReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *UpdateDoctorAvailabilityReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UpdateDoctorAvailabilityReq) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func (m *UpdateDoctorAvailabilityReq) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *UpdateDoctorAvailabilityReq) GetDoctorDate() string {
	if m != nil {
		return m.DoctorDate
	}
	return ""
}

func (m *UpdateDoctorAvailabilityReq) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *UpdateDoctorAvailabilityReq) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *UpdateDoctorAvailabilityReq) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*Appointment)(nil), "booking_service.Appointment")
	proto.RegisterType((*AppointmentsType)(nil), "booking_service.AppointmentsType")
	proto.RegisterType((*CreateAppointmentReq)(nil), "booking_service.CreateAppointmentReq")
	proto.RegisterType((*UpdateAppointmentReq)(nil), "booking_service.UpdateAppointmentReq")
	proto.RegisterType((*FieldValueReq)(nil), "booking_service.FieldValueReq")
	proto.RegisterType((*StatusRes)(nil), "booking_service.StatusRes")
	proto.RegisterType((*GetAllReq)(nil), "booking_service.GetAllReq")
	proto.RegisterType((*Patient)(nil), "booking_service.Patient")
	proto.RegisterType((*PatientsType)(nil), "booking_service.PatientsType")
	proto.RegisterType((*CreatedPatient)(nil), "booking_service.CreatedPatient")
	proto.RegisterType((*UpdatePatientReq)(nil), "booking_service.UpdatePatientReq")
	proto.RegisterType((*UpdatePhoneNumber)(nil), "booking_service.UpdatePhoneNumber")
	proto.RegisterType((*DoctorNote)(nil), "booking_service.DoctorNote")
	proto.RegisterType((*DoctorNotesType)(nil), "booking_service.DoctorNotesType")
	proto.RegisterType((*CreatedDoctorNote)(nil), "booking_service.CreatedDoctorNote")
	proto.RegisterType((*UpdateDoctorNoteReq)(nil), "booking_service.UpdateDoctorNoteReq")
	proto.RegisterType((*Archive)(nil), "booking_service.Archive")
	proto.RegisterType((*ArchivesType)(nil), "booking_service.ArchivesType")
	proto.RegisterType((*CreatedArchive)(nil), "booking_service.CreatedArchive")
	proto.RegisterType((*UpdateArchiveReq)(nil), "booking_service.UpdateArchiveReq")
	proto.RegisterType((*DoctorAvailability)(nil), "booking_service.DoctorAvailability")
	proto.RegisterType((*DoctorAvailabilitysType)(nil), "booking_service.DoctorAvailabilitysType")
	proto.RegisterType((*CreatedDoctorAvailability)(nil), "booking_service.CreatedDoctorAvailability")
	proto.RegisterType((*UpdateDoctorAvailabilityReq)(nil), "booking_service.UpdateDoctorAvailabilityReq")
}

func init() {
	proto.RegisterFile("booking_service/booking_service.proto", fileDescriptor_3797a257730a0219)
}

var fileDescriptor_3797a257730a0219 = []byte{
	// 1571 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0x4b, 0x8f, 0xdc, 0xc4,
	0x13, 0xff, 0xdb, 0x9e, 0x97, 0x6b, 0x76, 0x36, 0xbb, 0x9d, 0xfd, 0x83, 0x33, 0x09, 0xc3, 0xc4,
	0x49, 0xd0, 0x08, 0xa1, 0x20, 0x2d, 0x5c, 0x91, 0x98, 0xcd, 0x26, 0xab, 0xcd, 0x46, 0x9b, 0x95,
	0xf3, 0x50, 0x84, 0x90, 0x56, 0xde, 0x75, 0x93, 0x98, 0xcc, 0x8c, 0x07, 0x8f, 0x37, 0x62, 0xee,
	0x48, 0x70, 0xe0, 0xc2, 0x09, 0x24, 0x0e, 0x5c, 0x38, 0x70, 0x40, 0x1c, 0x38, 0x72, 0xe0, 0x86,
	0x84, 0xc4, 0x85, 0x8f, 0x00, 0xcb, 0x81, 0xcf, 0x00, 0x5c, 0x90, 0xfb, 0x61, 0x77, 0xfb, 0xd1,
	0x9e, 0x01, 0x72, 0xcb, 0x6d, 0xba, 0xba, 0xba, 0x5d, 0xf5, 0xfb, 0x55, 0x55, 0x57, 0xf7, 0xc0,
	0x95, 0xa3, 0x20, 0x78, 0xec, 0x4f, 0x1e, 0x1e, 0xce, 0x70, 0xf8, 0xc4, 0x3f, 0xc6, 0xaf, 0x66,
	0xc6, 0x57, 0xa7, 0x61, 0x10, 0x05, 0xe8, 0x4c, 0x46, 0x6c, 0x7f, 0x6e, 0x40, 0x7b, 0x38, 0x9d,
	0x06, 0xfe, 0x24, 0x1a, 0xe3, 0x49, 0x84, 0x56, 0x41, 0xdf, 0xf5, 0x2c, 0xad, 0xaf, 0x0d, 0x0c,
	0x47, 0xdf, 0xf5, 0x90, 0x0d, 0x2b, 0xdb, 0x78, 0xea, 0x86, 0x64, 0x76, 0xd7, 0xb3, 0xf4, 0xbe,
	0x36, 0x30, 0x1d, 0x49, 0x86, 0xba, 0xd0, 0xda, 0x0e, 0x8e, 0xa3, 0x20, 0xdc, 0xf5, 0x2c, 0x83,
	0xcc, 0x27, 0x63, 0x74, 0x01, 0xcc, 0x03, 0x37, 0xf2, 0xe9, 0xe2, 0x1a, 0x99, 0x4c, 0x05, 0x68,
	0x00, 0x67, 0x84, 0x8f, 0x6f, 0xbb, 0x11, 0xb6, 0xea, 0x44, 0x27, 0x2b, 0xce, 0x68, 0xde, 0xf5,
	0xc7, 0xd8, 0x6a, 0xe4, 0x34, 0x63, 0x31, 0xb1, 0xe6, 0x24, 0x74, 0x23, 0x3f, 0x98, 0x58, 0x4d,
	0xe2, 0x47, 0x32, 0x46, 0x6b, 0x60, 0xec, 0xe1, 0xb9, 0xd5, 0x22, 0x2b, 0xe3, 0x9f, 0xb1, 0x7d,
	0xd7, 0xdf, 0x9f, 0xfa, 0x21, 0x9e, 0x0d, 0x23, 0xcb, 0xec, 0x6b, 0x83, 0xba, 0x93, 0x0a, 0xd0,
	0x65, 0xe8, 0x30, 0x63, 0xef, 0x44, 0x6e, 0x74, 0x32, 0xb3, 0xa0, 0xaf, 0x0d, 0x5a, 0x8e, 0x2c,
	0x8c, 0xf7, 0xb8, 0x16, 0x62, 0x37, 0xc2, 0xde, 0x30, 0xb2, 0xda, 0xd4, 0xc7, 0x44, 0x10, 0xcf,
	0xde, 0x9b, 0x7a, 0x6c, 0x76, 0x85, 0xce, 0x26, 0x82, 0x78, 0x76, 0x1b, 0x8f, 0x30, 0x9d, 0xed,
	0xd0, 0xd9, 0x44, 0x60, 0xbf, 0x0b, 0x6b, 0x82, 0x7b, 0xb3, 0xbb, 0xf3, 0x29, 0x46, 0x1b, 0x50,
	0xbf, 0x16, 0x9c, 0x4c, 0x22, 0x46, 0x12, 0x1d, 0xa0, 0x37, 0x61, 0x45, 0xd4, 0xb4, 0xf4, 0xbe,
	0x31, 0x68, 0x6f, 0x5e, 0xb8, 0x9a, 0x0d, 0x03, 0x41, 0xc9, 0x91, 0x56, 0xd8, 0xdf, 0xe9, 0xb0,
	0x41, 0xad, 0x16, 0x75, 0xf0, 0x7b, 0xcf, 0x42, 0xa0, 0x3a, 0x04, 0xec, 0x8f, 0x74, 0xd8, 0xa0,
	0xa4, 0x66, 0xc0, 0x2b, 0x70, 0x4f, 0x5f, 0xd8, 0x3d, 0xa3, 0xda, 0xbd, 0x5a, 0xb1, 0x7b, 0xf5,
	0x12, 0xf7, 0x1a, 0x95, 0xee, 0x35, 0x8b, 0x22, 0x7c, 0x03, 0xea, 0x37, 0x7c, 0x3c, 0xf2, 0x18,
	0x6c, 0x74, 0x10, 0x4b, 0xef, 0xbb, 0xa3, 0x13, 0x4c, 0x40, 0x33, 0x1d, 0x3a, 0xb0, 0x0f, 0xa1,
	0x43, 0xa6, 0xc9, 0x28, 0x86, 0x20, 0x59, 0xac, 0x15, 0x2e, 0xd6, 0x85, 0xc5, 0x34, 0xd6, 0xe2,
	0xe8, 0x67, 0xd6, 0x18, 0xc4, 0x1a, 0x49, 0x66, 0x5f, 0x02, 0x93, 0xfe, 0x72, 0xf0, 0x0c, 0x3d,
	0x07, 0x0d, 0xa6, 0xaa, 0x11, 0x55, 0x36, 0xb2, 0xbf, 0xd0, 0xc0, 0xdc, 0xc1, 0xd1, 0x70, 0x34,
	0x7a, 0x0a, 0x26, 0x20, 0x04, 0xb5, 0x03, 0xf7, 0x21, 0x26, 0xe8, 0xd7, 0x1c, 0xf2, 0x3b, 0xde,
	0xed, 0x96, 0x3f, 0xf6, 0x23, 0x82, 0x7d, 0xcd, 0xa1, 0x03, 0x64, 0x41, 0xf3, 0x76, 0xe8, 0xe1,
	0x70, 0x6b, 0xce, 0x82, 0x95, 0x0f, 0xed, 0xbf, 0x74, 0x68, 0x32, 0x94, 0x85, 0xaa, 0x6b, 0x92,
	0xaa, 0x7b, 0x01, 0xcc, 0x1b, 0x7e, 0x38, 0x8b, 0xf6, 0xdd, 0x31, 0xb7, 0x2e, 0x15, 0xc4, 0xfc,
	0xdf, 0x72, 0xd9, 0x24, 0x4b, 0x36, 0x3e, 0x8e, 0x57, 0x6e, 0xf9, 0x61, 0xf4, 0x88, 0x44, 0x1a,
	0x4b, 0xb6, 0x44, 0x10, 0xa3, 0xb5, 0x83, 0x27, 0x1e, 0x0e, 0x59, 0x80, 0xb0, 0x11, 0xea, 0x01,
	0x6c, 0x8d, 0x82, 0xc0, 0xdb, 0x09, 0x83, 0x93, 0x29, 0x33, 0x54, 0x90, 0xa0, 0x3e, 0xb4, 0x0f,
	0x1e, 0x05, 0x13, 0xbc, 0x7f, 0x32, 0x3e, 0xc2, 0x21, 0x89, 0x11, 0xd3, 0x11, 0x45, 0x31, 0x22,
	0xd7, 0xfc, 0x88, 0xe7, 0x15, 0xf9, 0x1d, 0xfb, 0x4e, 0x8a, 0x53, 0x38, 0x67, 0x11, 0xc2, 0x87,
	0xe8, 0x25, 0x58, 0x65, 0xae, 0x1f, 0x84, 0xc1, 0xd1, 0x08, 0x8f, 0x49, 0x56, 0x99, 0x4e, 0x46,
	0xfa, 0x14, 0x2b, 0xeb, 0x5b, 0xb0, 0xc2, 0xbe, 0xa5, 0xaa, 0xaa, 0xaf, 0x43, 0x8b, 0x6b, 0xb1,
	0x8a, 0x6a, 0xe5, 0x2a, 0x2a, 0x53, 0x70, 0x12, 0x4d, 0xfb, 0x2b, 0x1d, 0x56, 0x99, 0x95, 0xcf,
	0x08, 0x56, 0x12, 0x6c, 0x7f, 0xa9, 0xc3, 0x1a, 0xa5, 0x8c, 0xc3, 0xb8, 0x64, 0xb6, 0x4a, 0x40,
	0x1a, 0x2a, 0x20, 0x6b, 0x2a, 0x20, 0xeb, 0xe5, 0x40, 0x36, 0x14, 0x40, 0x36, 0x73, 0x40, 0x72,
	0x98, 0xcc, 0x62, 0x98, 0xa0, 0x0a, 0xa6, 0x76, 0x21, 0x4c, 0x2e, 0xac, 0x33, 0x94, 0x04, 0x46,
	0x96, 0x81, 0x29, 0xc3, 0xaf, 0x91, 0xe3, 0xd7, 0xfe, 0x53, 0x03, 0xa0, 0x47, 0xf6, 0x7e, 0x10,
	0xe1, 0x5c, 0x1f, 0x78, 0x19, 0x3a, 0xc2, 0x31, 0xc4, 0xba, 0x00, 0xc3, 0x91, 0x85, 0xff, 0xa2,
	0x0d, 0xb0, 0x61, 0xe5, 0x20, 0xc4, 0xb3, 0xe3, 0xd0, 0x9f, 0x92, 0x73, 0x8d, 0x12, 0x22, 0xc9,
	0xe4, 0x6a, 0xd0, 0x50, 0x56, 0x83, 0xa6, 0xb2, 0x1a, 0xb4, 0xb2, 0xd5, 0xe0, 0x1d, 0x38, 0x93,
	0xfa, 0xae, 0x2a, 0x08, 0x6f, 0x40, 0x5b, 0x50, 0x64, 0x35, 0xe1, 0x7c, 0xae, 0x26, 0xa4, 0x3a,
	0x8e, 0xa8, 0x6f, 0x7f, 0xaa, 0xc1, 0x3a, 0xb3, 0x58, 0xc0, 0x3a, 0x87, 0xad, 0x56, 0x85, 0xad,
	0xae, 0xc2, 0xd6, 0xa8, 0xc2, 0xb6, 0x96, 0xc7, 0xd6, 0xfe, 0x41, 0x83, 0xb3, 0x14, 0x2d, 0xc1,
	0xf6, 0x25, 0x73, 0x31, 0xe7, 0x87, 0x51, 0xe5, 0x47, 0x4d, 0xe5, 0x47, 0xbd, 0xca, 0x8f, 0x46,
	0x81, 0x1f, 0xbf, 0xeb, 0xd0, 0x1c, 0x86, 0xc7, 0x8f, 0xfc, 0x27, 0xf9, 0x18, 0xde, 0x84, 0x0d,
	0xfa, 0xa5, 0xe1, 0x13, 0xd7, 0x1f, 0xb9, 0x47, 0xfe, 0xc8, 0x8f, 0xe6, 0x49, 0x28, 0x17, 0xce,
	0xc5, 0x16, 0xdd, 0x89, 0xdc, 0x50, 0xec, 0xc7, 0x52, 0x41, 0x9c, 0xd9, 0xd7, 0x27, 0x1e, 0x99,
	0xa3, 0xae, 0xf0, 0x61, 0x41, 0x66, 0xd7, 0x0b, 0x4f, 0xb8, 0xb4, 0x7f, 0x61, 0x75, 0x86, 0x75,
	0x18, 0x71, 0xc2, 0xba, 0x73, 0xd2, 0xf2, 0xcd, 0xa7, 0x38, 0x29, 0xc8, 0xa9, 0x88, 0x76, 0x6e,
	0x64, 0x38, 0x1c, 0x93, 0x40, 0x8d, 0xa3, 0x5a, 0x77, 0x64, 0xa1, 0x9c, 0x33, 0xa6, 0x32, 0x67,
	0x40, 0x99, 0x33, 0xed, 0x82, 0x13, 0x94, 0x01, 0x5d, 0x71, 0x82, 0x72, 0xad, 0xd2, 0x13, 0x94,
	0x29, 0x38, 0x89, 0xa6, 0xfd, 0x41, 0x7a, 0x82, 0x72, 0x32, 0xcb, 0xc8, 0xd3, 0x16, 0x25, 0x4f,
	0x57, 0x90, 0x67, 0x54, 0x91, 0x57, 0xab, 0x20, 0xaf, 0xae, 0x22, 0xaf, 0xb1, 0x00, 0x79, 0xcd,
	0x02, 0xf2, 0xec, 0x6f, 0x93, 0xd3, 0x91, 0x43, 0xb4, 0x64, 0x46, 0x96, 0x81, 0x66, 0x2c, 0x0a,
	0x5a, 0x4d, 0x01, 0x5a, 0xbd, 0x0a, 0xb4, 0x46, 0x05, 0x68, 0x4d, 0x15, 0x68, 0xad, 0x05, 0x40,
	0x33, 0x8b, 0x40, 0xfb, 0x46, 0x07, 0x94, 0x77, 0xec, 0x3f, 0x7f, 0xd8, 0xe8, 0xf1, 0xe3, 0x52,
	0x68, 0xc4, 0x04, 0x89, 0x0c, 0x63, 0x5d, 0x01, 0x63, 0x43, 0x86, 0xb1, 0x0c, 0x1e, 0x29, 0x91,
	0x5b, 0xca, 0x44, 0x36, 0x95, 0x89, 0x0c, 0xd9, 0x44, 0xfe, 0x50, 0x83, 0xe7, 0xf3, 0x80, 0xa9,
	0x92, 0xfa, 0x3e, 0x0f, 0xab, 0x43, 0x69, 0x05, 0x4b, 0xf0, 0x4b, 0x25, 0xc7, 0xa1, 0xa8, 0xeb,
	0x9c, 0x2d, 0xf8, 0xa2, 0xfd, 0x93, 0x06, 0xe7, 0xa4, 0xe3, 0x51, 0x62, 0x30, 0xcb, 0x98, 0x56,
	0xc1, 0x98, 0xae, 0x64, 0xcc, 0x50, 0x33, 0xb6, 0x44, 0xe0, 0x97, 0x94, 0x70, 0xfb, 0x0f, 0x0d,
	0xce, 0x8b, 0x47, 0xaa, 0xe4, 0xff, 0x3f, 0xb9, 0x94, 0x0a, 0xbe, 0x1b, 0x15, 0xbe, 0xd7, 0x94,
	0xbe, 0xd7, 0xd5, 0xbe, 0x37, 0x14, 0xbe, 0x37, 0xcb, 0x7c, 0x6f, 0x89, 0xbe, 0x6f, 0x7e, 0x6f,
	0xc0, 0xd9, 0xad, 0x20, 0x78, 0x8c, 0xbd, 0x43, 0x57, 0x78, 0x64, 0x42, 0x0f, 0x78, 0xff, 0x23,
	0xbe, 0x39, 0x5e, 0xc9, 0x05, 0x4c, 0xd1, 0x3b, 0x54, 0x57, 0xf9, 0x98, 0x85, 0xf6, 0x61, 0x35,
	0xbe, 0xef, 0x0b, 0x92, 0x5e, 0x4e, 0x5f, 0x7a, 0x97, 0xa8, 0xd8, 0xcf, 0x81, 0x75, 0xfa, 0x7e,
	0x20, 0x0a, 0xbb, 0xb9, 0x25, 0xc9, 0x1b, 0x43, 0xf7, 0xa2, 0x6a, 0x3b, 0x9a, 0x4d, 0x0f, 0x78,
	0x1b, 0xaf, 0xf6, 0xbe, 0xe8, 0x21, 0xa9, 0xc2, 0xda, 0xdb, 0xb0, 0x4e, 0x13, 0x7a, 0x19, 0x00,
	0xf2, 0xde, 0x24, 0xef, 0x2a, 0x9b, 0xbf, 0x1a, 0xb0, 0xca, 0x08, 0x9c, 0xb2, 0x3b, 0xec, 0x4d,
	0xe8, 0x50, 0x5e, 0xf8, 0xa5, 0xf6, 0xc5, 0x12, 0xde, 0xf8, 0xad, 0xb7, 0x5b, 0x7a, 0x59, 0x46,
	0x37, 0x00, 0x76, 0x70, 0xc4, 0x47, 0x55, 0x86, 0x96, 0xef, 0x73, 0x13, 0x3a, 0x94, 0x01, 0x2a,
	0x98, 0x29, 0x19, 0x7a, 0xa1, 0x6c, 0x1b, 0xca, 0xce, 0x2d, 0xe8, 0x48, 0x57, 0x51, 0x74, 0xb1,
	0x84, 0x99, 0xf4, 0xaa, 0xaa, 0xb0, 0xec, 0x2e, 0x20, 0xe1, 0xca, 0xc6, 0xa5, 0x76, 0xd9, 0x96,
	0xe9, 0x4d, 0x4c, 0x45, 0x0b, 0xda, 0x83, 0x0e, 0xe5, 0x79, 0x51, 0xe8, 0x54, 0x1c, 0x7f, 0x9d,
	0x26, 0xa9, 0x47, 0xcb, 0xf9, 0x24, 0xbe, 0xa5, 0xa0, 0x3b, 0xb0, 0x46, 0x89, 0x14, 0xee, 0x28,
	0x76, 0x19, 0xd7, 0xa9, 0x4e, 0x57, 0x75, 0x0f, 0x8a, 0xd1, 0xdd, 0xc1, 0x91, 0x20, 0xa8, 0xb2,
	0x5c, 0xb9, 0xdb, 0x1e, 0xb4, 0x29, 0xaf, 0xe4, 0x5e, 0xa5, 0x64, 0xbd, 0xaf, 0xd8, 0x87, 0x12,
	0x7f, 0x8f, 0x77, 0x59, 0xe2, 0x9d, 0xac, 0x84, 0x28, 0xe9, 0x76, 0xa4, 0xb6, 0x71, 0x1f, 0xd6,
	0x28, 0x57, 0x4b, 0x38, 0xad, 0xa2, 0xeb, 0xe3, 0x34, 0x25, 0x5d, 0xd6, 0x14, 0x27, 0x29, 0xc9,
	0xbb, 0xe4, 0xd2, 0x94, 0x64, 0x0a, 0xdd, 0xd2, 0xee, 0x9b, 0xa5, 0x24, 0x1f, 0x2d, 0x9f, 0x92,
	0x7c, 0xe5, 0x1e, 0x2d, 0xc4, 0xa3, 0x11, 0xef, 0xe6, 0x97, 0xcc, 0x49, 0xe9, 0x52, 0x91, 0xe4,
	0x24, 0xdf, 0xbd, 0x2c, 0x27, 0xd3, 0x06, 0x59, 0x69, 0x1a, 0xcb, 0x9e, 0x45, 0xbd, 0x54, 0xd1,
	0xf1, 0x49, 0x0d, 0xba, 0x72, 0xf6, 0xb8, 0x62, 0xb7, 0xf2, 0x18, 0x2c, 0x31, 0x89, 0xa4, 0x4e,
	0xe6, 0x65, 0x75, 0x32, 0x89, 0xba, 0xdd, 0x45, 0xba, 0x29, 0xf4, 0x36, 0xfc, 0x3f, 0x49, 0x2e,
	0x69, 0xa2, 0xca, 0xc1, 0x85, 0x76, 0x77, 0xe1, 0x1c, 0x25, 0xac, 0xa0, 0x67, 0x53, 0x92, 0x3b,
	0x58, 0x60, 0x77, 0xca, 0xf3, 0x18, 0xac, 0xb2, 0x56, 0x09, 0xbd, 0xa2, 0x4c, 0xc5, 0x4c, 0x57,
	0xb5, 0x98, 0x47, 0xf7, 0xc1, 0x12, 0x53, 0x73, 0x29, 0xc8, 0x14, 0x31, 0xb1, 0xb5, 0xf6, 0xe3,
	0x69, 0x4f, 0xfb, 0xf9, 0xb4, 0xa7, 0xfd, 0x72, 0xda, 0xd3, 0x3e, 0xfb, 0xad, 0xf7, 0xbf, 0xa3,
	0x06, 0xf9, 0xdf, 0xf5, 0xb5, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x3f, 0x94, 0x82, 0xa0,
	0x1d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BookedAppointmentsClient is the client API for BookedAppointments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BookedAppointmentsClient interface {
	// Booked_appointments
	CreateAppointment(ctx context.Context, in *CreateAppointmentReq, opts ...grpc.CallOption) (*Appointment, error)
	GetAppointment(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*Appointment, error)
	GetAllAppointment(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*AppointmentsType, error)
	UpdateAppointment(ctx context.Context, in *UpdateAppointmentReq, opts ...grpc.CallOption) (*Appointment, error)
	DeleteAppointment(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*StatusRes, error)
}

type bookedAppointmentsClient struct {
	cc *grpc.ClientConn
}

func NewBookedAppointmentsClient(cc *grpc.ClientConn) BookedAppointmentsClient {
	return &bookedAppointmentsClient{cc}
}

func (c *bookedAppointmentsClient) CreateAppointment(ctx context.Context, in *CreateAppointmentReq, opts ...grpc.CallOption) (*Appointment, error) {
	out := new(Appointment)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_appointments/CreateAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedAppointmentsClient) GetAppointment(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*Appointment, error) {
	out := new(Appointment)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_appointments/GetAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedAppointmentsClient) GetAllAppointment(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*AppointmentsType, error) {
	out := new(AppointmentsType)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_appointments/GetAllAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedAppointmentsClient) UpdateAppointment(ctx context.Context, in *UpdateAppointmentReq, opts ...grpc.CallOption) (*Appointment, error) {
	out := new(Appointment)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_appointments/UpdateAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedAppointmentsClient) DeleteAppointment(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*StatusRes, error) {
	out := new(StatusRes)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_appointments/DeleteAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookedAppointmentsServer is the server API for BookedAppointments service.
type BookedAppointmentsServer interface {
	// Booked_appointments
	CreateAppointment(context.Context, *CreateAppointmentReq) (*Appointment, error)
	GetAppointment(context.Context, *FieldValueReq) (*Appointment, error)
	GetAllAppointment(context.Context, *GetAllReq) (*AppointmentsType, error)
	UpdateAppointment(context.Context, *UpdateAppointmentReq) (*Appointment, error)
	DeleteAppointment(context.Context, *FieldValueReq) (*StatusRes, error)
}

// UnimplementedBookedAppointmentsServer can be embedded to have forward compatible implementations.
type UnimplementedBookedAppointmentsServer struct {
}

func (*UnimplementedBookedAppointmentsServer) CreateAppointment(ctx context.Context, req *CreateAppointmentReq) (*Appointment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppointment not implemented")
}
func (*UnimplementedBookedAppointmentsServer) GetAppointment(ctx context.Context, req *FieldValueReq) (*Appointment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointment not implemented")
}
func (*UnimplementedBookedAppointmentsServer) GetAllAppointment(ctx context.Context, req *GetAllReq) (*AppointmentsType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAppointment not implemented")
}
func (*UnimplementedBookedAppointmentsServer) UpdateAppointment(ctx context.Context, req *UpdateAppointmentReq) (*Appointment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointment not implemented")
}
func (*UnimplementedBookedAppointmentsServer) DeleteAppointment(ctx context.Context, req *FieldValueReq) (*StatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppointment not implemented")
}

func RegisterBookedAppointmentsServer(s *grpc.Server, srv BookedAppointmentsServer) {
	s.RegisterService(&_BookedAppointments_serviceDesc, srv)
}

func _BookedAppointments_CreateAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppointmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentsServer).CreateAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_appointments/CreateAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentsServer).CreateAppointment(ctx, req.(*CreateAppointmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedAppointments_GetAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentsServer).GetAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_appointments/GetAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentsServer).GetAppointment(ctx, req.(*FieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedAppointments_GetAllAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentsServer).GetAllAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_appointments/GetAllAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentsServer).GetAllAppointment(ctx, req.(*GetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedAppointments_UpdateAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppointmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentsServer).UpdateAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_appointments/UpdateAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentsServer).UpdateAppointment(ctx, req.(*UpdateAppointmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedAppointments_DeleteAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentsServer).DeleteAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_appointments/DeleteAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentsServer).DeleteAppointment(ctx, req.(*FieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _BookedAppointments_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booking_service.Booked_appointments",
	HandlerType: (*BookedAppointmentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppointment",
			Handler:    _BookedAppointments_CreateAppointment_Handler,
		},
		{
			MethodName: "GetAppointment",
			Handler:    _BookedAppointments_GetAppointment_Handler,
		},
		{
			MethodName: "GetAllAppointment",
			Handler:    _BookedAppointments_GetAllAppointment_Handler,
		},
		{
			MethodName: "UpdateAppointment",
			Handler:    _BookedAppointments_UpdateAppointment_Handler,
		},
		{
			MethodName: "DeleteAppointment",
			Handler:    _BookedAppointments_DeleteAppointment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking_service/booking_service.proto",
}

// BookedPatientClient is the client API for BookedPatient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BookedPatientClient interface {
	// Patient
	CreatePatient(ctx context.Context, in *CreatedPatient, opts ...grpc.CallOption) (*Patient, error)
	GetPatient(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*Patient, error)
	GetAllPatiens(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*PatientsType, error)
	UpdatePatient(ctx context.Context, in *UpdatePatientReq, opts ...grpc.CallOption) (*Patient, error)
	UpdatePhonePatient(ctx context.Context, in *UpdatePhoneNumber, opts ...grpc.CallOption) (*StatusRes, error)
	DeletePatient(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*StatusRes, error)
}

type bookedPatientClient struct {
	cc *grpc.ClientConn
}

func NewBookedPatientClient(cc *grpc.ClientConn) BookedPatientClient {
	return &bookedPatientClient{cc}
}

func (c *bookedPatientClient) CreatePatient(ctx context.Context, in *CreatedPatient, opts ...grpc.CallOption) (*Patient, error) {
	out := new(Patient)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_patient/CreatePatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedPatientClient) GetPatient(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*Patient, error) {
	out := new(Patient)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_patient/GetPatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedPatientClient) GetAllPatiens(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*PatientsType, error) {
	out := new(PatientsType)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_patient/GetAllPatiens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedPatientClient) UpdatePatient(ctx context.Context, in *UpdatePatientReq, opts ...grpc.CallOption) (*Patient, error) {
	out := new(Patient)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_patient/UpdatePatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedPatientClient) UpdatePhonePatient(ctx context.Context, in *UpdatePhoneNumber, opts ...grpc.CallOption) (*StatusRes, error) {
	out := new(StatusRes)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_patient/UpdatePhonePatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedPatientClient) DeletePatient(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*StatusRes, error) {
	out := new(StatusRes)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_patient/DeletePatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookedPatientServer is the server API for BookedPatient service.
type BookedPatientServer interface {
	// Patient
	CreatePatient(context.Context, *CreatedPatient) (*Patient, error)
	GetPatient(context.Context, *FieldValueReq) (*Patient, error)
	GetAllPatiens(context.Context, *GetAllReq) (*PatientsType, error)
	UpdatePatient(context.Context, *UpdatePatientReq) (*Patient, error)
	UpdatePhonePatient(context.Context, *UpdatePhoneNumber) (*StatusRes, error)
	DeletePatient(context.Context, *FieldValueReq) (*StatusRes, error)
}

// UnimplementedBookedPatientServer can be embedded to have forward compatible implementations.
type UnimplementedBookedPatientServer struct {
}

func (*UnimplementedBookedPatientServer) CreatePatient(ctx context.Context, req *CreatedPatient) (*Patient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePatient not implemented")
}
func (*UnimplementedBookedPatientServer) GetPatient(ctx context.Context, req *FieldValueReq) (*Patient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatient not implemented")
}
func (*UnimplementedBookedPatientServer) GetAllPatiens(ctx context.Context, req *GetAllReq) (*PatientsType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPatiens not implemented")
}
func (*UnimplementedBookedPatientServer) UpdatePatient(ctx context.Context, req *UpdatePatientReq) (*Patient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatient not implemented")
}
func (*UnimplementedBookedPatientServer) UpdatePhonePatient(ctx context.Context, req *UpdatePhoneNumber) (*StatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhonePatient not implemented")
}
func (*UnimplementedBookedPatientServer) DeletePatient(ctx context.Context, req *FieldValueReq) (*StatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePatient not implemented")
}

func RegisterBookedPatientServer(s *grpc.Server, srv BookedPatientServer) {
	s.RegisterService(&_BookedPatient_serviceDesc, srv)
}

func _BookedPatient_CreatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatedPatient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedPatientServer).CreatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_patient/CreatePatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedPatientServer).CreatePatient(ctx, req.(*CreatedPatient))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedPatient_GetPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedPatientServer).GetPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_patient/GetPatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedPatientServer).GetPatient(ctx, req.(*FieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedPatient_GetAllPatiens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedPatientServer).GetAllPatiens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_patient/GetAllPatiens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedPatientServer).GetAllPatiens(ctx, req.(*GetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedPatient_UpdatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePatientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedPatientServer).UpdatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_patient/UpdatePatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedPatientServer).UpdatePatient(ctx, req.(*UpdatePatientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedPatient_UpdatePhonePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhoneNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedPatientServer).UpdatePhonePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_patient/UpdatePhonePatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedPatientServer).UpdatePhonePatient(ctx, req.(*UpdatePhoneNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedPatient_DeletePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedPatientServer).DeletePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_patient/DeletePatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedPatientServer).DeletePatient(ctx, req.(*FieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _BookedPatient_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booking_service.Booked_patient",
	HandlerType: (*BookedPatientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePatient",
			Handler:    _BookedPatient_CreatePatient_Handler,
		},
		{
			MethodName: "GetPatient",
			Handler:    _BookedPatient_GetPatient_Handler,
		},
		{
			MethodName: "GetAllPatiens",
			Handler:    _BookedPatient_GetAllPatiens_Handler,
		},
		{
			MethodName: "UpdatePatient",
			Handler:    _BookedPatient_UpdatePatient_Handler,
		},
		{
			MethodName: "UpdatePhonePatient",
			Handler:    _BookedPatient_UpdatePhonePatient_Handler,
		},
		{
			MethodName: "DeletePatient",
			Handler:    _BookedPatient_DeletePatient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking_service/booking_service.proto",
}

// BookedDoctorNotesClient is the client API for BookedDoctorNotes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BookedDoctorNotesClient interface {
	// Doctor Notes
	CreateDoctorNote(ctx context.Context, in *CreatedDoctorNote, opts ...grpc.CallOption) (*DoctorNote, error)
	GetDoctorNote(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*DoctorNote, error)
	GetAllNotes(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*DoctorNotesType, error)
	UpdateDoctorNote(ctx context.Context, in *UpdateDoctorNoteReq, opts ...grpc.CallOption) (*DoctorNote, error)
	DeleteDoctorNote(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*StatusRes, error)
}

type bookedDoctorNotesClient struct {
	cc *grpc.ClientConn
}

func NewBookedDoctorNotesClient(cc *grpc.ClientConn) BookedDoctorNotesClient {
	return &bookedDoctorNotesClient{cc}
}

func (c *bookedDoctorNotesClient) CreateDoctorNote(ctx context.Context, in *CreatedDoctorNote, opts ...grpc.CallOption) (*DoctorNote, error) {
	out := new(DoctorNote)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_doctor_notes/CreateDoctorNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedDoctorNotesClient) GetDoctorNote(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*DoctorNote, error) {
	out := new(DoctorNote)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_doctor_notes/GetDoctorNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedDoctorNotesClient) GetAllNotes(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*DoctorNotesType, error) {
	out := new(DoctorNotesType)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_doctor_notes/GetAllNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedDoctorNotesClient) UpdateDoctorNote(ctx context.Context, in *UpdateDoctorNoteReq, opts ...grpc.CallOption) (*DoctorNote, error) {
	out := new(DoctorNote)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_doctor_notes/UpdateDoctorNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedDoctorNotesClient) DeleteDoctorNote(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*StatusRes, error) {
	out := new(StatusRes)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_doctor_notes/DeleteDoctorNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookedDoctorNotesServer is the server API for BookedDoctorNotes service.
type BookedDoctorNotesServer interface {
	// Doctor Notes
	CreateDoctorNote(context.Context, *CreatedDoctorNote) (*DoctorNote, error)
	GetDoctorNote(context.Context, *FieldValueReq) (*DoctorNote, error)
	GetAllNotes(context.Context, *GetAllReq) (*DoctorNotesType, error)
	UpdateDoctorNote(context.Context, *UpdateDoctorNoteReq) (*DoctorNote, error)
	DeleteDoctorNote(context.Context, *FieldValueReq) (*StatusRes, error)
}

// UnimplementedBookedDoctorNotesServer can be embedded to have forward compatible implementations.
type UnimplementedBookedDoctorNotesServer struct {
}

func (*UnimplementedBookedDoctorNotesServer) CreateDoctorNote(ctx context.Context, req *CreatedDoctorNote) (*DoctorNote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoctorNote not implemented")
}
func (*UnimplementedBookedDoctorNotesServer) GetDoctorNote(ctx context.Context, req *FieldValueReq) (*DoctorNote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorNote not implemented")
}
func (*UnimplementedBookedDoctorNotesServer) GetAllNotes(ctx context.Context, req *GetAllReq) (*DoctorNotesType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNotes not implemented")
}
func (*UnimplementedBookedDoctorNotesServer) UpdateDoctorNote(ctx context.Context, req *UpdateDoctorNoteReq) (*DoctorNote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoctorNote not implemented")
}
func (*UnimplementedBookedDoctorNotesServer) DeleteDoctorNote(ctx context.Context, req *FieldValueReq) (*StatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoctorNote not implemented")
}

func RegisterBookedDoctorNotesServer(s *grpc.Server, srv BookedDoctorNotesServer) {
	s.RegisterService(&_BookedDoctorNotes_serviceDesc, srv)
}

func _BookedDoctorNotes_CreateDoctorNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatedDoctorNote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedDoctorNotesServer).CreateDoctorNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_doctor_notes/CreateDoctorNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedDoctorNotesServer).CreateDoctorNote(ctx, req.(*CreatedDoctorNote))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedDoctorNotes_GetDoctorNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedDoctorNotesServer).GetDoctorNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_doctor_notes/GetDoctorNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedDoctorNotesServer).GetDoctorNote(ctx, req.(*FieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedDoctorNotes_GetAllNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedDoctorNotesServer).GetAllNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_doctor_notes/GetAllNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedDoctorNotesServer).GetAllNotes(ctx, req.(*GetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedDoctorNotes_UpdateDoctorNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDoctorNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedDoctorNotesServer).UpdateDoctorNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_doctor_notes/UpdateDoctorNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedDoctorNotesServer).UpdateDoctorNote(ctx, req.(*UpdateDoctorNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedDoctorNotes_DeleteDoctorNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedDoctorNotesServer).DeleteDoctorNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_doctor_notes/DeleteDoctorNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedDoctorNotesServer).DeleteDoctorNote(ctx, req.(*FieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _BookedDoctorNotes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booking_service.Booked_doctor_notes",
	HandlerType: (*BookedDoctorNotesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDoctorNote",
			Handler:    _BookedDoctorNotes_CreateDoctorNote_Handler,
		},
		{
			MethodName: "GetDoctorNote",
			Handler:    _BookedDoctorNotes_GetDoctorNote_Handler,
		},
		{
			MethodName: "GetAllNotes",
			Handler:    _BookedDoctorNotes_GetAllNotes_Handler,
		},
		{
			MethodName: "UpdateDoctorNote",
			Handler:    _BookedDoctorNotes_UpdateDoctorNote_Handler,
		},
		{
			MethodName: "DeleteDoctorNote",
			Handler:    _BookedDoctorNotes_DeleteDoctorNote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking_service/booking_service.proto",
}

// BookedArchiveClient is the client API for BookedArchive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BookedArchiveClient interface {
	// Archive
	CreateArchive(ctx context.Context, in *CreatedArchive, opts ...grpc.CallOption) (*Archive, error)
	GetArchive(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*Archive, error)
	GetAllArchives(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*ArchivesType, error)
	UpdateArchive(ctx context.Context, in *UpdateArchiveReq, opts ...grpc.CallOption) (*Archive, error)
	DeleteArchive(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*StatusRes, error)
}

type bookedArchiveClient struct {
	cc *grpc.ClientConn
}

func NewBookedArchiveClient(cc *grpc.ClientConn) BookedArchiveClient {
	return &bookedArchiveClient{cc}
}

func (c *bookedArchiveClient) CreateArchive(ctx context.Context, in *CreatedArchive, opts ...grpc.CallOption) (*Archive, error) {
	out := new(Archive)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_archive/CreateArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedArchiveClient) GetArchive(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*Archive, error) {
	out := new(Archive)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_archive/GetArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedArchiveClient) GetAllArchives(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*ArchivesType, error) {
	out := new(ArchivesType)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_archive/GetAllArchives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedArchiveClient) UpdateArchive(ctx context.Context, in *UpdateArchiveReq, opts ...grpc.CallOption) (*Archive, error) {
	out := new(Archive)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_archive/UpdateArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedArchiveClient) DeleteArchive(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*StatusRes, error) {
	out := new(StatusRes)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_archive/DeleteArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookedArchiveServer is the server API for BookedArchive service.
type BookedArchiveServer interface {
	// Archive
	CreateArchive(context.Context, *CreatedArchive) (*Archive, error)
	GetArchive(context.Context, *FieldValueReq) (*Archive, error)
	GetAllArchives(context.Context, *GetAllReq) (*ArchivesType, error)
	UpdateArchive(context.Context, *UpdateArchiveReq) (*Archive, error)
	DeleteArchive(context.Context, *FieldValueReq) (*StatusRes, error)
}

// UnimplementedBookedArchiveServer can be embedded to have forward compatible implementations.
type UnimplementedBookedArchiveServer struct {
}

func (*UnimplementedBookedArchiveServer) CreateArchive(ctx context.Context, req *CreatedArchive) (*Archive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArchive not implemented")
}
func (*UnimplementedBookedArchiveServer) GetArchive(ctx context.Context, req *FieldValueReq) (*Archive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchive not implemented")
}
func (*UnimplementedBookedArchiveServer) GetAllArchives(ctx context.Context, req *GetAllReq) (*ArchivesType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllArchives not implemented")
}
func (*UnimplementedBookedArchiveServer) UpdateArchive(ctx context.Context, req *UpdateArchiveReq) (*Archive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArchive not implemented")
}
func (*UnimplementedBookedArchiveServer) DeleteArchive(ctx context.Context, req *FieldValueReq) (*StatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArchive not implemented")
}

func RegisterBookedArchiveServer(s *grpc.Server, srv BookedArchiveServer) {
	s.RegisterService(&_BookedArchive_serviceDesc, srv)
}

func _BookedArchive_CreateArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatedArchive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedArchiveServer).CreateArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_archive/CreateArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedArchiveServer).CreateArchive(ctx, req.(*CreatedArchive))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedArchive_GetArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedArchiveServer).GetArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_archive/GetArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedArchiveServer).GetArchive(ctx, req.(*FieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedArchive_GetAllArchives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedArchiveServer).GetAllArchives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_archive/GetAllArchives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedArchiveServer).GetAllArchives(ctx, req.(*GetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedArchive_UpdateArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArchiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedArchiveServer).UpdateArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_archive/UpdateArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedArchiveServer).UpdateArchive(ctx, req.(*UpdateArchiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedArchive_DeleteArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedArchiveServer).DeleteArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_archive/DeleteArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedArchiveServer).DeleteArchive(ctx, req.(*FieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _BookedArchive_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booking_service.Booked_archive",
	HandlerType: (*BookedArchiveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArchive",
			Handler:    _BookedArchive_CreateArchive_Handler,
		},
		{
			MethodName: "GetArchive",
			Handler:    _BookedArchive_GetArchive_Handler,
		},
		{
			MethodName: "GetAllArchives",
			Handler:    _BookedArchive_GetAllArchives_Handler,
		},
		{
			MethodName: "UpdateArchive",
			Handler:    _BookedArchive_UpdateArchive_Handler,
		},
		{
			MethodName: "DeleteArchive",
			Handler:    _BookedArchive_DeleteArchive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking_service/booking_service.proto",
}

// BookedDoctorAvailabilityClient is the client API for BookedDoctorAvailability service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BookedDoctorAvailabilityClient interface {
	// DoctorAvailability
	CreateDoctorAvailability(ctx context.Context, in *CreatedDoctorAvailability, opts ...grpc.CallOption) (*DoctorAvailability, error)
	GetDoctorAvailability(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*DoctorAvailability, error)
	GetAllDoctorAvailabilitys(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*DoctorAvailabilitysType, error)
	UpdateDoctorAvailability(ctx context.Context, in *UpdateDoctorAvailabilityReq, opts ...grpc.CallOption) (*DoctorAvailability, error)
	DeleteDoctorAvailability(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*StatusRes, error)
}

type bookedDoctorAvailabilityClient struct {
	cc *grpc.ClientConn
}

func NewBookedDoctorAvailabilityClient(cc *grpc.ClientConn) BookedDoctorAvailabilityClient {
	return &bookedDoctorAvailabilityClient{cc}
}

func (c *bookedDoctorAvailabilityClient) CreateDoctorAvailability(ctx context.Context, in *CreatedDoctorAvailability, opts ...grpc.CallOption) (*DoctorAvailability, error) {
	out := new(DoctorAvailability)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_doctor_availability/CreateDoctorAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedDoctorAvailabilityClient) GetDoctorAvailability(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*DoctorAvailability, error) {
	out := new(DoctorAvailability)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_doctor_availability/GetDoctorAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedDoctorAvailabilityClient) GetAllDoctorAvailabilitys(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*DoctorAvailabilitysType, error) {
	out := new(DoctorAvailabilitysType)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_doctor_availability/GetAllDoctorAvailabilitys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedDoctorAvailabilityClient) UpdateDoctorAvailability(ctx context.Context, in *UpdateDoctorAvailabilityReq, opts ...grpc.CallOption) (*DoctorAvailability, error) {
	out := new(DoctorAvailability)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_doctor_availability/UpdateDoctorAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedDoctorAvailabilityClient) DeleteDoctorAvailability(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*StatusRes, error) {
	out := new(StatusRes)
	err := c.cc.Invoke(ctx, "/booking_service.Booked_doctor_availability/DeleteDoctorAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookedDoctorAvailabilityServer is the server API for BookedDoctorAvailability service.
type BookedDoctorAvailabilityServer interface {
	// DoctorAvailability
	CreateDoctorAvailability(context.Context, *CreatedDoctorAvailability) (*DoctorAvailability, error)
	GetDoctorAvailability(context.Context, *FieldValueReq) (*DoctorAvailability, error)
	GetAllDoctorAvailabilitys(context.Context, *GetAllReq) (*DoctorAvailabilitysType, error)
	UpdateDoctorAvailability(context.Context, *UpdateDoctorAvailabilityReq) (*DoctorAvailability, error)
	DeleteDoctorAvailability(context.Context, *FieldValueReq) (*StatusRes, error)
}

// UnimplementedBookedDoctorAvailabilityServer can be embedded to have forward compatible implementations.
type UnimplementedBookedDoctorAvailabilityServer struct {
}

func (*UnimplementedBookedDoctorAvailabilityServer) CreateDoctorAvailability(ctx context.Context, req *CreatedDoctorAvailability) (*DoctorAvailability, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoctorAvailability not implemented")
}
func (*UnimplementedBookedDoctorAvailabilityServer) GetDoctorAvailability(ctx context.Context, req *FieldValueReq) (*DoctorAvailability, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorAvailability not implemented")
}
func (*UnimplementedBookedDoctorAvailabilityServer) GetAllDoctorAvailabilitys(ctx context.Context, req *GetAllReq) (*DoctorAvailabilitysType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDoctorAvailabilitys not implemented")
}
func (*UnimplementedBookedDoctorAvailabilityServer) UpdateDoctorAvailability(ctx context.Context, req *UpdateDoctorAvailabilityReq) (*DoctorAvailability, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoctorAvailability not implemented")
}
func (*UnimplementedBookedDoctorAvailabilityServer) DeleteDoctorAvailability(ctx context.Context, req *FieldValueReq) (*StatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoctorAvailability not implemented")
}

func RegisterBookedDoctorAvailabilityServer(s *grpc.Server, srv BookedDoctorAvailabilityServer) {
	s.RegisterService(&_BookedDoctorAvailability_serviceDesc, srv)
}

func _BookedDoctorAvailability_CreateDoctorAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatedDoctorAvailability)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedDoctorAvailabilityServer).CreateDoctorAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_doctor_availability/CreateDoctorAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedDoctorAvailabilityServer).CreateDoctorAvailability(ctx, req.(*CreatedDoctorAvailability))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedDoctorAvailability_GetDoctorAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedDoctorAvailabilityServer).GetDoctorAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_doctor_availability/GetDoctorAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedDoctorAvailabilityServer).GetDoctorAvailability(ctx, req.(*FieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedDoctorAvailability_GetAllDoctorAvailabilitys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedDoctorAvailabilityServer).GetAllDoctorAvailabilitys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_doctor_availability/GetAllDoctorAvailabilitys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedDoctorAvailabilityServer).GetAllDoctorAvailabilitys(ctx, req.(*GetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedDoctorAvailability_UpdateDoctorAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDoctorAvailabilityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedDoctorAvailabilityServer).UpdateDoctorAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_doctor_availability/UpdateDoctorAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedDoctorAvailabilityServer).UpdateDoctorAvailability(ctx, req.(*UpdateDoctorAvailabilityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedDoctorAvailability_DeleteDoctorAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedDoctorAvailabilityServer).DeleteDoctorAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.Booked_doctor_availability/DeleteDoctorAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedDoctorAvailabilityServer).DeleteDoctorAvailability(ctx, req.(*FieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _BookedDoctorAvailability_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booking_service.Booked_doctor_availability",
	HandlerType: (*BookedDoctorAvailabilityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDoctorAvailability",
			Handler:    _BookedDoctorAvailability_CreateDoctorAvailability_Handler,
		},
		{
			MethodName: "GetDoctorAvailability",
			Handler:    _BookedDoctorAvailability_GetDoctorAvailability_Handler,
		},
		{
			MethodName: "GetAllDoctorAvailabilitys",
			Handler:    _BookedDoctorAvailability_GetAllDoctorAvailabilitys_Handler,
		},
		{
			MethodName: "UpdateDoctorAvailability",
			Handler:    _BookedDoctorAvailability_UpdateDoctorAvailability_Handler,
		},
		{
			MethodName: "DeleteDoctorAvailability",
			Handler:    _BookedDoctorAvailability_DeleteDoctorAvailability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking_service/booking_service.proto",
}

func (m *Appointment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Appointment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Appointment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PatientStatus {
		i--
		if m.PatientStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.ExpiresAt != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x42
	}
	if m.Duration != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x38
	}
	if len(m.AppointmentTime) > 0 {
		i -= len(m.AppointmentTime)
		copy(dAtA[i:], m.AppointmentTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AppointmentTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AppointmentDate) > 0 {
		i -= len(m.AppointmentDate)
		copy(dAtA[i:], m.AppointmentDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AppointmentDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppointmentsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppointmentsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppointmentsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Appointments) > 0 {
		for iNdEx := len(m.Appointments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Appointments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBookingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateAppointmentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAppointmentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAppointmentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PatientStatus {
		i--
		if m.PatientStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.ExpiresAt != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x42
	}
	if m.Duration != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x38
	}
	if len(m.AppointmentTime) > 0 {
		i -= len(m.AppointmentTime)
		copy(dAtA[i:], m.AppointmentTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AppointmentTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AppointmentDate) > 0 {
		i -= len(m.AppointmentDate)
		copy(dAtA[i:], m.AppointmentDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AppointmentDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAppointmentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAppointmentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAppointmentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0x42
	}
	if m.PatientStatus {
		i--
		if m.PatientStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ExpiresAt != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Duration != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AppointmentTime) > 0 {
		i -= len(m.AppointmentTime)
		copy(dAtA[i:], m.AppointmentTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AppointmentTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppointmentDate) > 0 {
		i -= len(m.AppointmentDate)
		copy(dAtA[i:], m.AppointmentDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.AppointmentDate)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *FieldValueReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldValueReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldValueReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeleteStatus {
		i--
		if m.DeleteStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatusRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderBy) > 0 {
		i -= len(m.OrderBy)
		copy(dAtA[i:], m.OrderBy)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.OrderBy)))
		i--
		dAtA[i] = 0x32
	}
	if m.Limit != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.Page != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if m.DeleteStatus {
		i--
		if m.DeleteStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Patient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Patient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Patient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PatientProblem) > 0 {
		i -= len(m.PatientProblem)
		copy(dAtA[i:], m.PatientProblem)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientProblem)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BloodGroup) > 0 {
		i -= len(m.BloodGroup)
		copy(dAtA[i:], m.BloodGroup)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.BloodGroup)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BirthDate) > 0 {
		i -= len(m.BirthDate)
		copy(dAtA[i:], m.BirthDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.BirthDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PatientsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PatientsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PatientsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Patients) > 0 {
		for iNdEx := len(m.Patients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Patients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBookingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatedPatient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatedPatient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatedPatient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PatientProblem) > 0 {
		i -= len(m.PatientProblem)
		copy(dAtA[i:], m.PatientProblem)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientProblem)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BloodGroup) > 0 {
		i -= len(m.BloodGroup)
		copy(dAtA[i:], m.BloodGroup)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.BloodGroup)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BirthDate) > 0 {
		i -= len(m.BirthDate)
		copy(dAtA[i:], m.BirthDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.BirthDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePatientReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePatientReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePatientReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PatientProblem) > 0 {
		i -= len(m.PatientProblem)
		copy(dAtA[i:], m.PatientProblem)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientProblem)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BloodGroup) > 0 {
		i -= len(m.BloodGroup)
		copy(dAtA[i:], m.BloodGroup)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.BloodGroup)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BirthDate) > 0 {
		i -= len(m.BirthDate)
		copy(dAtA[i:], m.BirthDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.BirthDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePhoneNumber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePhoneNumber) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePhoneNumber) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DoctorNote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorNote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoctorNote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Prescription) > 0 {
		i -= len(m.Prescription)
		copy(dAtA[i:], m.Prescription)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Prescription)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AppointmentId != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.AppointmentId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DoctorNotesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorNotesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoctorNotesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DoctorNotes) > 0 {
		for iNdEx := len(m.DoctorNotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DoctorNotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBookingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatedDoctorNote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatedDoctorNote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatedDoctorNote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Prescription) > 0 {
		i -= len(m.Prescription)
		copy(dAtA[i:], m.Prescription)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Prescription)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x12
	}
	if m.AppointmentId != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.AppointmentId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDoctorNoteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDoctorNoteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDoctorNoteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Prescription) > 0 {
		i -= len(m.Prescription)
		copy(dAtA[i:], m.Prescription)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Prescription)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x22
	}
	if m.AppointmentId != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.AppointmentId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Archive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Archive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Archive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x4a
	}
	if m.PaymentAmount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PaymentAmount))))
		i--
		dAtA[i] = 0x45
	}
	if len(m.PaymentType) > 0 {
		i -= len(m.PaymentType)
		copy(dAtA[i:], m.PaymentType)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PaymentType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PatientProblem) > 0 {
		i -= len(m.PatientProblem)
		copy(dAtA[i:], m.PatientProblem)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientProblem)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DoctorAvailabilityId != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.DoctorAvailabilityId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArchivesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchivesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArchivesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Archives) > 0 {
		for iNdEx := len(m.Archives) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Archives[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBookingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatedArchive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatedArchive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatedArchive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaymentAmount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PaymentAmount))))
		i--
		dAtA[i] = 0x3d
	}
	if len(m.PaymentType) > 0 {
		i -= len(m.PaymentType)
		copy(dAtA[i:], m.PaymentType)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PaymentType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PatientProblem) > 0 {
		i -= len(m.PatientProblem)
		copy(dAtA[i:], m.PatientProblem)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientProblem)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x12
	}
	if m.DoctorAvailabilityId != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.DoctorAvailabilityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateArchiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateArchiveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateArchiveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaymentAmount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PaymentAmount))))
		i--
		dAtA[i] = 0x4d
	}
	if len(m.PaymentType) > 0 {
		i -= len(m.PaymentType)
		copy(dAtA[i:], m.PaymentType)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PaymentType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PatientProblem) > 0 {
		i -= len(m.PatientProblem)
		copy(dAtA[i:], m.PatientProblem)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.PatientProblem)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x22
	}
	if m.DoctorAvailabilityId != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.DoctorAvailabilityId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DoctorAvailability) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorAvailability) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoctorAvailability) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DoctorDate) > 0 {
		i -= len(m.DoctorDate)
		copy(dAtA[i:], m.DoctorDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DoctorAvailabilitysType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorAvailabilitysType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoctorAvailabilitysType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Doctor_Availabilitys) > 0 {
		for iNdEx := len(m.Doctor_Availabilitys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Doctor_Availabilitys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBookingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintBookingService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatedDoctorAvailability) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatedDoctorAvailability) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatedDoctorAvailability) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DoctorDate) > 0 {
		i -= len(m.DoctorDate)
		copy(dAtA[i:], m.DoctorDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorDate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDoctorAvailabilityReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDoctorAvailabilityReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDoctorAvailabilityReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DoctorDate) > 0 {
		i -= len(m.DoctorDate)
		copy(dAtA[i:], m.DoctorDate)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintBookingService(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBookingService(dAtA []byte, offset int, v uint64) int {
	offset -= sovBookingService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Appointment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBookingService(uint64(m.Id))
	}
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AppointmentDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AppointmentTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovBookingService(uint64(m.Duration))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovBookingService(uint64(m.ExpiresAt))
	}
	if m.PatientStatus {
		n += 2
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppointmentsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovBookingService(uint64(m.Count))
	}
	if len(m.Appointments) > 0 {
		for _, e := range m.Appointments {
			l = e.Size()
			n += 1 + l + sovBookingService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAppointmentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AppointmentDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AppointmentTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovBookingService(uint64(m.Duration))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovBookingService(uint64(m.ExpiresAt))
	}
	if m.PatientStatus {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAppointmentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppointmentDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.AppointmentTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovBookingService(uint64(m.Duration))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovBookingService(uint64(m.ExpiresAt))
	}
	if m.PatientStatus {
		n += 2
	}
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FieldValueReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.DeleteStatus {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.DeleteStatus {
		n += 2
	}
	if m.Page != 0 {
		n += 1 + sovBookingService(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovBookingService(uint64(m.Limit))
	}
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Patient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.BirthDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.BloodGroup)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientProblem)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PatientsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovBookingService(uint64(m.Count))
	}
	if len(m.Patients) > 0 {
		for _, e := range m.Patients {
			l = e.Size()
			n += 1 + l + sovBookingService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreatedPatient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.BirthDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.BloodGroup)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientProblem)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePatientReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.BirthDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.BloodGroup)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientProblem)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePhoneNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorNote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBookingService(uint64(m.Id))
	}
	if m.AppointmentId != 0 {
		n += 1 + sovBookingService(uint64(m.AppointmentId))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Prescription)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorNotesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovBookingService(uint64(m.Count))
	}
	if len(m.DoctorNotes) > 0 {
		for _, e := range m.DoctorNotes {
			l = e.Size()
			n += 1 + l + sovBookingService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreatedDoctorNote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppointmentId != 0 {
		n += 1 + sovBookingService(uint64(m.AppointmentId))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Prescription)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDoctorNoteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.AppointmentId != 0 {
		n += 1 + sovBookingService(uint64(m.AppointmentId))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Prescription)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Archive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBookingService(uint64(m.Id))
	}
	if m.DoctorAvailabilityId != 0 {
		n += 1 + sovBookingService(uint64(m.DoctorAvailabilityId))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientProblem)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PaymentType)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.PaymentAmount != 0 {
		n += 5
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArchivesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovBookingService(uint64(m.Count))
	}
	if len(m.Archives) > 0 {
		for _, e := range m.Archives {
			l = e.Size()
			n += 1 + l + sovBookingService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreatedArchive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoctorAvailabilityId != 0 {
		n += 1 + sovBookingService(uint64(m.DoctorAvailabilityId))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientProblem)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PaymentType)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.PaymentAmount != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateArchiveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.DoctorAvailabilityId != 0 {
		n += 1 + sovBookingService(uint64(m.DoctorAvailabilityId))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PatientProblem)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.PaymentType)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.PaymentAmount != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorAvailability) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBookingService(uint64(m.Id))
	}
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DoctorDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorAvailabilitysType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovBookingService(uint64(m.Count))
	}
	if len(m.Doctor_Availabilitys) > 0 {
		for _, e := range m.Doctor_Availabilitys {
			l = e.Size()
			n += 1 + l + sovBookingService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreatedDoctorAvailability) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DoctorDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDoctorAvailabilityReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.DoctorDate)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBookingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBookingService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBookingService(x uint64) (n int) {
	return sovBookingService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Appointment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Appointment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Appointment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PatientStatus = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppointmentsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppointmentsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppointmentsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appointments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Appointments = append(m.Appointments, &Appointment{})
			if err := m.Appointments[len(m.Appointments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAppointmentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAppointmentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAppointmentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PatientStatus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAppointmentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAppointmentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAppointmentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppointmentTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PatientStatus = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldValueReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldValueReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldValueReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteStatus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteStatus = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Patient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Patient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Patient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BirthDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BloodGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BloodGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientProblem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientProblem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PatientsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatientsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatientsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Patients = append(m.Patients, &Patient{})
			if err := m.Patients[len(m.Patients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatedPatient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatedPatient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatedPatient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BirthDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BloodGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BloodGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientProblem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientProblem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePatientReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePatientReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePatientReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BirthDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BloodGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BloodGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientProblem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientProblem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePhoneNumber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePhoneNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePhoneNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorNote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorNote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorNote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentId", wireType)
			}
			m.AppointmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppointmentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorNotesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorNotesType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorNotesType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorNotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorNotes = append(m.DoctorNotes, &DoctorNote{})
			if err := m.DoctorNotes[len(m.DoctorNotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatedDoctorNote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatedDoctorNote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatedDoctorNote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentId", wireType)
			}
			m.AppointmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppointmentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDoctorNoteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDoctorNoteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDoctorNoteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentId", wireType)
			}
			m.AppointmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppointmentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Archive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Archive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Archive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorAvailabilityId", wireType)
			}
			m.DoctorAvailabilityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoctorAvailabilityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientProblem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientProblem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PaymentAmount = float32(math.Float32frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArchivesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchivesType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchivesType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Archives = append(m.Archives, &Archive{})
			if err := m.Archives[len(m.Archives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatedArchive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatedArchive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatedArchive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorAvailabilityId", wireType)
			}
			m.DoctorAvailabilityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoctorAvailabilityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientProblem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientProblem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PaymentAmount = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateArchiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateArchiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateArchiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorAvailabilityId", wireType)
			}
			m.DoctorAvailabilityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoctorAvailabilityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientProblem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientProblem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PaymentAmount = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorAvailability) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorAvailability: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorAvailability: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorAvailabilitysType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorAvailabilitysType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorAvailabilitysType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doctor_Availabilitys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doctor_Availabilitys = append(m.Doctor_Availabilitys, &DoctorAvailability{})
			if err := m.Doctor_Availabilitys[len(m.Doctor_Availabilitys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatedDoctorAvailability) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatedDoctorAvailability: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatedDoctorAvailability: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDoctorAvailabilityReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDoctorAvailabilityReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDoctorAvailabilityReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBookingService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBookingService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBookingService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBookingService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBookingService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBookingService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBookingService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBookingService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBookingService = fmt.Errorf("proto: unexpected end of group")
)
